var documenterSearchIndex = {"docs":
[{"location":"package_docs.html#Sample-Documentation","page":"Sample Documentation","title":"Sample Documentation","text":"","category":"section"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"CurrentModule = JuliaTemplateRepo","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"This page shows how to pull in the doc strings in your code.","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"The first thing to do is insert","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"```@meta\nCurrentModule = JuliaTemplateRepo  # your package name here\n```","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"which sets the module to your package so you don't have to prepend the methods with your package.","category":"page"},{"location":"package_docs.html#Pulling-in-some-docstrings","page":"Sample Documentation","title":"Pulling in some docstrings","text":"","category":"section"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"First, let's pull in the docstrings for vec_add! and vec_sub!, which we can do using","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"```@docs\nvec_add!\nvec_sub!\n```","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"This inserts the following into our markdown file:","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"vec_add!\nvec_sub!","category":"page"},{"location":"package_docs.html#JuliaTemplateRepo.vec_add!","page":"Sample Documentation","title":"JuliaTemplateRepo.vec_add!","text":"vec_add!(a::AbstractVector, b::AbstractVector)\nved_add!(v::VecPair)\n\nAdds b to a, modifying a in place. Returns the modified a. Vectors must be the same length.\n\n\n\n\n\n","category":"function"},{"location":"package_docs.html#JuliaTemplateRepo.vec_sub!","page":"Sample Documentation","title":"JuliaTemplateRepo.vec_sub!","text":"vec_sub!(a::AbstractVector, b::AbstractVector)\n\nSubstracts b from a, modifying a in place. Returns the modified a. Vectors must be the same length.\n\n\n\n\n\nvec_sub!(v::VecPair)\n\nSubstract v.b from v.a, modifying v.a in place.\n\n\n\n\n\n","category":"function"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"Notice how in the vec_add! docstring we included both signatures in a single docstring, but vec_sub! had two separate docstrings. We can select only one of the docstrings by filtering with the input signature:","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"```@docs\nvec_sub!(::VecPair)\nnorm(::VecPair)\n```","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"which inserts only one docstring,","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"vec_sub!(::VecPair)","category":"page"},{"location":"package_docs.html#JuliaTemplateRepo.vec_sub!-Tuple{VecPair}","page":"Sample Documentation","title":"JuliaTemplateRepo.vec_sub!","text":"vec_sub!(v::VecPair)\n\nSubstract v.b from v.a, modifying v.a in place.\n\n\n\n\n\n","category":"method"},{"location":"package_docs.html#Linking-Docstrings","page":"Sample Documentation","title":"Linking Docstrings","text":"","category":"section"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"We can link to the docstring for vec_add! using the [vec_add!](@ref) syntax. Note the tick marks around the method, inside the square brackets. We can also do this inside the docstring themselves, like we do in the docstring for VecPair:","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"VecPair","category":"page"},{"location":"package_docs.html#JuliaTemplateRepo.VecPair","page":"Sample Documentation","title":"JuliaTemplateRepo.VecPair","text":"VecPair{V}\n\nHolds two vectors of the same length and type.\n\nThe vectors can be retrieved using v.a and v.b or v[1] and v[2]. Supports vec_add! and vec_sub!.\n\nHere is some LaTeX for you:\n\n    sum_i=1^N x_k^T Q_k x_k\n\nConstructors\n\nVecPair{V}(a,b)\nVecPair(a::V, b::V)\nVecPair(a::StaticVector, b::StaticVector)\n\n\n\n\n\n","category":"type"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"For illustration, we also show in this docstring how to include LaTeX math inside the docstring. For reference, we've copied the raw docstring below:","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"\"\"\"\n    VecPair{V}\n\nHolds two vectors of the same length and type.\n\nThe vectors can be retrieved using `v.a` and `v.b` or `v[1]` and `v[2]`.\nSupports [`vec_add!`](@ref) and [`vec_sub!`](@ref).\n\nHere is some ``\\\\LaTeX`` for you:","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"math     \\sum{i=1}^N xk^T Qk xk","category":"page"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"\n# Constructors\n    VecPair{V}(a,b)\n    VecPair(a::V, b::V)\n    VecPair(a::StaticVector, b::StaticVector)\n\n\"\"\"","category":"page"},{"location":"package_docs.html#Writing-Docstrings","page":"Sample Documentation","title":"Writing Docstrings","text":"","category":"section"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"As stated in the Julia manual, start the docstring with the signature, which is indented with 4 spaces so it prints as Julia code. You can use normal markdown syntax, such as headings, to make your docstrings look since and stay organized. See the above example and the Documenter.jl docs on how to include LaTeX math into the docstrings.","category":"page"},{"location":"package_docs.html#Building-documentation-locally","page":"Sample Documentation","title":"Building documentation locally","text":"","category":"section"},{"location":"package_docs.html","page":"Sample Documentation","title":"Sample Documentation","text":"You can build the documentation locally by only running the makedocs function, and disabling prettyurls. It's common to update docstrings in your code and want these changes reflected in your build. After making a change to the docstring, you need to \"rebuild\" the docstrings by executing the whole file, easily done with CTRL-SHIFT-RETURN in Juno. You can then rebuild the the docs (using CTRL-RETURN in Juno) and the docstrings will be updated.","category":"page"},{"location":"tests.html#Adding-Tests","page":"Adding Tests","title":"Adding Tests","text":"","category":"section"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"Let's say we've added some code to our repo (check out src/newcode.jl) and now want to add some unit tests. All unit tests live in the test/ directory and are run via the test/runtests.jl file. Typically the runtests.jl file loads in any packages needed to run the tests, including Test and the actual package being tested, and then includes files that have defined @testsets. See the test/ directory for an example.","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"If you're using Julia v1.2+, we add the test dependencies the same way we add package dependencies: via the package manager. We first activate the test environment:","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"] activate /path/to/JuliaTemplateRepo/test","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"and then add the packages","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"(test) pkg> add Test\n(test) pkg> add StaticArrays\n(test) pkg> add LinearAlgebra","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"Adding the [compat] entries for the test Project.toml is suggested, but not required.","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"We can now run the test suite using the package manager. It's usually a good idea to restart Julia and run the command from the default environment:","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"] test JuliaTemplateRepo","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"which should return something similar to this:","category":"page"},{"location":"tests.html","page":"Adding Tests","title":"Adding Tests","text":"(Image: tests)","category":"page"},{"location":"deps.html#Adding-Dependencies","page":"Adding Dependencies","title":"Adding Dependencies","text":"","category":"section"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"Any registered package used by our new repo must be recorded in the Project.toml file. The easiest way to add packages is via the package manger. For our package, we are going to add StaticArrays.jl and LinearAlgebra as dependencies.","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"To do this, we need to first activate the Project.toml file for our project using the package manager:","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"] activate /path/to/JuliaTemplateRepo","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"Once activated, we add dependencies the exact same way we do normally:","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"(JuliaTemplateRepo) pkg> add StaticArrays\n(JuliaTemplateRepo) pkg> add LinearAlgebra\n(JuliaTemplateRepo) pkg> resolve","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"The last command isn't always needed, but is recommended, since it updates our Manifest.toml file based on the contents of the Project.toml file.","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"If we open our Project.toml file we should now see our packages under the [deps] header:","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"name = \"JuliaTemplateRepo\"\nuuid = \"bfba84be-7fa7-49e4-96a7-8b4754465918\"\nauthors = [\"Brian Jackson <bjack205@gmail.com>\"]\nversion = \"0.1.0\"\n\n[deps]\nLinearAlgebra = \"37e2e46d-f89d-539d-b4ee-838fcccc9c8e\"\nStaticArrays = \"90137ffa-7385-5640-81b9-e52037218182\"","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"We now need to specify the versions of the non-standard packages we officially support. The easiest–-and more conservative–-way to determine our compatibility is to restrict the versions to those that are currently being used. We can query this using the package manager:","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"(JuliaTemplateRepo) pkg> st","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"Which should return something like","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"(Image: st)","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"Here we see that LinearAlgebra is a part of the standard library since it doesn't have an associated version, and that we're using StaticArrays v0.12.4. Since all patches should be backward-compatible, we will allow any of the v0.12.x versions of StaticArrays.","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"We add this compatibility requirement, along with our required Julia version, to the [compat] section of our Project.toml file:","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"name = \"JuliaTemplateRepo\"\nuuid = \"bfba84be-7fa7-49e4-96a7-8b4754465918\"\nauthors = [\"Brian Jackson <bjack205@gmail.com>\"]\nversion = \"0.1.0\"\n\n[deps]\nLinearAlgebra = \"37e2e46d-f89d-539d-b4ee-838fcccc9c8e\"\nStaticArrays = \"90137ffa-7385-5640-81b9-e52037218182\"\n\n[compat]\nStaticArrays = \"0.12\"\njulia = \"1\"","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"The Julia package registrator requires that all packages have upper-bounded compatibility requirements.","category":"page"},{"location":"deps.html","page":"Adding Dependencies","title":"Adding Dependencies","text":"Before committing our Project.toml file, we need to make sure our Manifest.toml file isn't included in our repo, since this file is dependent on the environment of the user. Add Manifest.toml to your .gitignore file.","category":"page"},{"location":"new_repo.html#Creating-a-New-Package","page":"Creating a New Package","title":"Creating a New Package","text":"","category":"section"},{"location":"new_repo.html","page":"Creating a New Package","title":"Creating a New Package","text":"This is a summary of the instructions in the Julia Pkg manual.","category":"page"},{"location":"new_repo.html","page":"Creating a New Package","title":"Creating a New Package","text":"Create a new repository on GitHub:","category":"page"},{"location":"new_repo.html","page":"Creating a New Package","title":"Creating a New Package","text":"Follow the Julia package naming conventions. All julia package repos should have \".jl\" at the end. Do NOT initialize the repo with a README or license at this point.","category":"page"},{"location":"new_repo.html","page":"Creating a New Package","title":"Creating a New Package","text":"(Image: New Repo)","category":"page"},{"location":"new_repo.html","page":"Creating a New Package","title":"Creating a New Package","text":"After creating the repo you should see a screen that looks like the one below. Copy the","category":"page"},{"location":"new_repo.html","page":"Creating a New Package","title":"Creating a New Package","text":"repo URL.","category":"page"},{"location":"new_repo.html","page":"Creating a New Package","title":"Creating a New Package","text":"(Image: Blank Repo)","category":"page"},{"location":"new_repo.html","page":"Creating a New Package","title":"Creating a New Package","text":"In your terminal on your computer, launch Julia. Generate the package files using the","category":"page"},{"location":"new_repo.html","page":"Creating a New Package","title":"Creating a New Package","text":"package manager:","category":"page"},{"location":"new_repo.html","page":"Creating a New Package","title":"Creating a New Package","text":"```julia\n] generate JuliaTemplateRepo\n```\nThis will generate the `Project.toml` and a `src/JuliaTemplateRepo.jl` files.","category":"page"},{"location":"new_repo.html","page":"Creating a New Package","title":"Creating a New Package","text":"Create a README.md. Use whatever editor you prefer.\nCreate a git repo, add the remote, and push changes. These instructions are also found","category":"page"},{"location":"new_repo.html","page":"Creating a New Package","title":"Creating a New Package","text":"in the previous image.     cd JuliaTemplateRepo     git init     git add -A     git commit -m \"first commit\"     git remote add origin https://github.com/bjack205/JuliaTemplateRepo.jl.git     git push -u origin master","category":"page"},{"location":"new_repo.html","page":"Creating a New Package","title":"Creating a New Package","text":"(optional) Delete local files and add to Julia dev folder  cd ..  rm -rf JuliaTemplateRepo  Run Julia from your terminal and dev the package:  ] dev https://github.com/bjack205/JuliaTemplateRepo.jl.git  Alternatively, you can link to your local repository if you didn't delete it:  ] dev /path/to/local/repo/JuliaTemplateRepo","category":"page"},{"location":"CI.html#Setting-Up-CI","page":"Setting up CI","title":"Setting Up CI","text":"","category":"section"},{"location":"CI.html","page":"Setting up CI","title":"Setting up CI","text":"With a functional test suite, we are now ready to set up CI. Here we will demonstrate how to do this with GitHub actions.","category":"page"},{"location":"CI.html","page":"Setting up CI","title":"Setting up CI","text":"Open GitHub Actions panel in GitHub:","category":"page"},{"location":"CI.html","page":"Setting up CI","title":"Setting up CI","text":"(Image: GHA)","category":"page"},{"location":"CI.html","page":"Setting up CI","title":"Setting up CI","text":"Click \"set up a workflow yourself\"","category":"page"},{"location":"CI.html","page":"Setting up CI","title":"Setting up CI","text":"(Image: GHA_setup)","category":"page"},{"location":"CI.html","page":"Setting up CI","title":"Setting up CI","text":"Rename the file to CI.yml","category":"page"},{"location":"CI.html","page":"Setting up CI","title":"Setting up CI","text":"(Image: GHA_rename)","category":"page"},{"location":"CI.html","page":"Setting up CI","title":"Setting up CI","text":"Paste the following code","category":"page"},{"location":"CI.html","page":"Setting up CI","title":"Setting up CI","text":"name: CI\non:\n  push:\n    branches:\n      - master\n    tags: '*'\n  pull_request:\njobs:\n  test:\n    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        version:\n          - '1.3'\n        os:\n          - ubuntu-latest\n          - macOS-latest\n          - windows-latest\n        arch:\n          - x64\n    steps:\n      - uses: actions/checkout@v1\n      - uses: julia-actions/setup-julia@latest\n        with:\n          version: ${{ matrix.version }}\n          arch: ${{ matrix.arch }}\n      - uses: julia-actions/julia-runtest@latest\n      - uses: julia-actions/julia-uploadcodecov@latest\n        env:\n          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}","category":"page"},{"location":"CI.html","page":"Setting up CI","title":"Setting up CI","text":"Which runs Julia v1.3 (under `jobs/test/strategy/matrix/version`) on Ubuntu, Mac, and\nWindows (under `jobs/test/strategy/matrix/os`). The steps setup Julia, run the tests,\nand then upload the code coverage results to codecov. This will run on any pull request\nand on any push to the master branch.","category":"page"},{"location":"CI.html","page":"Setting up CI","title":"Setting up CI","text":"Commit the file and GitHub will automatically start running the tests\nAdd the badge: Go back to the GitHub Actions pane and select the currently running","category":"page"},{"location":"CI.html","page":"Setting up CI","title":"Setting up CI","text":"CI action and select \"Create Status Badge\", copy the badge link and paste it into the top of your README file. (Image: GHA_badge)","category":"page"},{"location":"index.html#JuliaTemplateRepo","page":"Introduction","title":"JuliaTemplateRepo","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Welcome to the documentation for my simple template repo for Julia! This repo is meant to help people get started quickly on setting up a new package in Julia, complete with documentation and CI.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"codecov.html#Adding-Code-Coverage","page":"Adding Code Coverage","title":"Adding Code Coverage","text":"","category":"section"},{"location":"codecov.html","page":"Adding Code Coverage","title":"Adding Code Coverage","text":"This section will detail how to get code coverage reports via codecov.io.","category":"page"},{"location":"codecov.html","page":"Adding Code Coverage","title":"Adding Code Coverage","text":"Go to codecov.io and log in.\nIn GitHub, add your repo in the CodeCov App settings.","category":"page"},{"location":"codecov.html","page":"Adding Code Coverage","title":"Adding Code Coverage","text":"If you haven't set up codecov for your organization or account, configure it via the GitHub App. (Image: cc_add)","category":"page"},{"location":"codecov.html","page":"Adding Code Coverage","title":"Adding Code Coverage","text":"In codecov.io, select the parent organization or account and select \"Add new repository\".","category":"page"},{"location":"codecov.html","page":"Adding Code Coverage","title":"Adding Code Coverage","text":"If your repo doesn't show up, you can navigate directly to it in the URL bar, e.g. https://codecov.io/gh/bjack205/JuliaTemplateRepo.jl.","category":"page"},{"location":"codecov.html","page":"Adding Code Coverage","title":"Adding Code Coverage","text":"Copy the codecov token","category":"page"},{"location":"codecov.html","page":"Adding Code Coverage","title":"Adding Code Coverage","text":"(Image: cc_copytoken)","category":"page"},{"location":"codecov.html","page":"Adding Code Coverage","title":"Adding Code Coverage","text":"Add token to GitHub secrets. In GitHub, navigate to the settings for your repo, select","category":"page"},{"location":"codecov.html","page":"Adding Code Coverage","title":"Adding Code Coverage","text":"\"Secrets\" from the toolbar on the left, and select \"New Secret\". Name the token CODECOV_TOKEN and copy the token from codecov.io. (Image: codecov_secret)","category":"page"}]
}
